import React, { useState, useRef } from 'react'
import jsPDF from 'jspdf'
import html2canvas from 'html2canvas'

const TrackDetection = ({ appData, addAlert }) => {
  const [analysisResults, setAnalysisResults] = useState(null)
  const [isAnalyzing, setIsAnalyzing] = useState(false)
  const [showModal, setShowModal] = useState(false)
  const [modalData, setModalData] = useState(null)
  const [isPdfLoading, setIsPdfLoading] = useState(false)
  const reportRef = useRef(null)

  const exportAsPDF = () => {
    setIsPdfLoading(true);
    
    setTimeout(() => {
      if (analysisResults) {
        const pdf = new jsPDF('p', 'mm', 'a4');
        const content = document.createElement('div');
        
        // Determine status text based on defect type
        const statusText = analysisResults.defect && analysisResults.defect.type ? 
          `${analysisResults.defect.type.toUpperCase()} DETECTED` : 'NONE DETECTED';
        
        // Determine status color based on defect type/severity
        let statusColor = '#2e7d32'; // Default green for no defects
        if (analysisResults.defect) {
          if (analysisResults.defect.severity === 'critical') {
            statusColor = '#d32f2f'; // Red for critical
          } else if (analysisResults.defect.severity === 'high') {
            statusColor = '#f57c00'; // Orange for high
          } else if (analysisResults.defect.severity === 'medium') {
            statusColor = '#fbc02d'; // Yellow for medium
          }
        }
        
        content.innerHTML = `
          <div style="padding: 20px; font-family: Arial, sans-serif;">
            <h2 style="color: #2e7d32; text-align: center; font-size: 26px; margin-bottom: 15px;">Indian Railways Track Inspection Report</h2>
            <hr style="border-top: 2px solid #2e7d32; margin-bottom: 20px;">
            
            <div style="background-color: #f5f5f5; border-radius: 8px; padding: 15px; margin-bottom: 20px;">
              <h3 style="font-size: 22px; margin-top: 0; margin-bottom: 15px; color: #333;">Analysis Results</h3>
              
              <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
                <span style="font-size: 18px; font-weight: bold; color: ${statusColor};">${statusText}</span>
                <span style="background: #5c6bc0; color: white; padding: 5px 10px; border-radius: 15px; font-size: 16px;">${analysisResults.confidence}% confidence</span>
              </div>
              
              <div id="image-placeholder" style="margin: 20px 0; text-align: center;"></div>
              
              <div style="background-color: white; border-radius: 6px; padding: 15px; margin-top: 15px;">
                ${analysisResults.defect ? `
                <p style="font-size: 16px; margin: 10px 0;"><strong style="color: #333;">Location:</strong> ${analysisResults.defect.location}</p>
                <p style="font-size: 16px; margin: 10px 0;"><strong style="color: #333;">Description:</strong> ${analysisResults.defect.description}</p>
                <p style="font-size: 16px; margin: 10px 0;">
                  <strong style="color: #333;">Severity:</strong> 
                  <span style="color: ${statusColor}; font-weight: bold;">${analysisResults.defect.severity.toUpperCase()}</span>
                </p>
                ` : ''}
                <p style="font-size: 16px; margin: 10px 0;"><strong style="color: #333;">Recommended Action:</strong> ${analysisResults.recommendedAction || (analysisResults.defect ? getRecommendedAction(analysisResults.defect) : 'Continue routine inspection')}</p>
                ${analysisResults.safetyImplications ? `<p style="font-size: 16px; margin: 10px 0;"><strong style="color: #333;">Safety Implications:</strong> ${analysisResults.safetyImplications}</p>` : ''}
              </div>
            </div>
            
            <hr style="border-top: 1px solid #ccc; margin: 25px 0;">
            <p style="text-align: center; font-size: 14px; color: #666;">
              Generated by Suraksha Portal - Indian Railways Track Monitoring System<br>
              Date: ${new Date().toLocaleDateString()}<br>
              Time: ${new Date().toLocaleTimeString()}
            </p>
          </div>
        `;
        
        document.body.appendChild(content);
        
        // If we have a base64 image from the upload, add it to the report
        if (analysisResults.imageData) {
          const imgElement = document.createElement('img');
          imgElement.src = analysisResults.imageData;
          imgElement.style.maxWidth = '100%';
          imgElement.style.maxHeight = '300px';
          imgElement.style.border = '1px solid #ccc';
          imgElement.style.borderRadius = '4px';
          imgElement.style.boxShadow = '0 2px 4px rgba(0,0,0,0.1)';
          content.querySelector('#image-placeholder').appendChild(imgElement);
        }
        
        html2canvas(content).then(canvas => {
          const imgData = canvas.toDataURL('image/png');
          const imgWidth = 190;
          const imgHeight = canvas.height * imgWidth / canvas.width;
          
          pdf.addImage(imgData, 'PNG', 10, 10, imgWidth, imgHeight);
          pdf.save(`track-inspection-report-${new Date().toISOString().slice(0, 10)}.pdf`);
          
          document.body.removeChild(content);
          setIsPdfLoading(false);
        }).catch(err => {
          console.error('Error generating PDF:', err);
          setIsPdfLoading(false);
          alert('Failed to generate PDF. Please try again.');
        });
      } else {
        setIsPdfLoading(false);
        alert('No analysis results available to export.');
      }
    }, 500);
  };

  const analyzeSampleImage = (sampleType) => {
    setIsAnalyzing(true)
    setAnalysisResults(null)

    setTimeout(() => {
      // Use a bundled sample image, but generate analysis dynamically (no static defect data)
      const sampleImagePath = '/assets/indianrailways2_1633326562750_1633326571040.jpeg'

      const img = new Image()
      img.crossOrigin = 'Anonymous'
      img.onload = () => {
        const canvas = document.createElement('canvas')
        canvas.width = img.width
        canvas.height = img.height
        const ctx = canvas.getContext('2d')
        ctx.drawImage(img, 0, 0)

        const imageData = canvas.toDataURL('image/jpeg')
        // Use the same flow as uploads: downscale and call Gemini vision
        downscaleImageForPrompt(imageData).then(async (promptImage) => {
          try {
            const result = await analyzeImageWithGemini(promptImage, `sample_${sampleType}.jpg`)
            result.imageData = imageData
            setAnalysisResults(result)
          } catch (e) {
            const sim = generateEnhancedSimulatedAnalysis(`sample_${sampleType}.jpg`, sampleType)
            sim.imageData = imageData
            setAnalysisResults(sim)
          } finally {
            setIsAnalyzing(false)
          }
        })
      }

      img.onerror = () => {
        console.error('Failed to load sample image')
        const sim = generateEnhancedSimulatedAnalysis(`sample_${sampleType}.jpg`, sampleType)
        setAnalysisResults(sim)
        setIsAnalyzing(false)
      }

      img.src = sampleImagePath
    }, 800)
  }

  const handleFileUpload = (event) => {
    const file = event.target.files[0]
    if (file) {
      // Validate file type
      if (!file.type.startsWith('image/')) {
        alert('Please select an image file')
        return
      }
      analyzeUploadedImage(file)
    }
  }

  const handleDragOver = (event) => {
    event.preventDefault()
    event.currentTarget.classList.add('dragover')
  }

  const handleDragLeave = (event) => {
    event.currentTarget.classList.remove('dragover')
  }

  const handleDrop = (event) => {
    event.preventDefault()
    event.currentTarget.classList.remove('dragover')
    
    const files = event.dataTransfer.files
    if (files.length > 0) {
      const file = files[0]
      if (!file.type.startsWith('image/')) {
        alert('Please drop an image file')
        return
      }
      analyzeUploadedImage(file)
    }
  }

  const analyzeUploadedImage = async (file) => {
    setIsAnalyzing(true)
    setAnalysisResults(null)

    try {
      // Convert image to base64
      const base64Image = await convertToBase64(file)
      // Create a compact representation for LLM prompt
      const promptImage = await downscaleImageForPrompt(base64Image)
      
      // Analyze with Google Gemini (vision-capable)
      const analysisResult = await analyzeImageWithGemini(promptImage, file.name)
      
      // Store the base64 image data in the analysis results
      analysisResult.imageData = base64Image
      
      setAnalysisResults(analysisResult)
    } catch (error) {
      console.error('Image analysis failed:', error)
      // Fallback to enhanced simulated analysis if API fails
      const enhancedAnalysis = generateEnhancedSimulatedAnalysis(file.name)
      
      // Try to still include the image if possible
      try {
        const base64Image = await convertToBase64(file)
        enhancedAnalysis.imageData = base64Image
      } catch (imgError) {
        console.error('Failed to convert image to base64:', imgError)
      }
      
      setAnalysisResults(enhancedAnalysis)
    } finally {
      setIsAnalyzing(false)
    }
  }

  const generateEnhancedSimulatedAnalysis = (filename, hintedType) => {
    const defectTypes = ['crack', 'obstacle', 'looseBolt', 'joint', 'ballast', 'signal', 'vegetation', 'drainage']
    const severities = ['critical', 'high', 'medium', 'low']
    const locations = ['Rail joint at KM 245.7', 'Track section B-4', 'Signal post 156', 'Ballast area near bridge', 'Rail head at curve']
    
    const randomDefectType = hintedType && defectTypes.includes(hintedType) ? hintedType : defectTypes[Math.floor(Math.random() * defectTypes.length)]
    const randomSeverity = severities[Math.floor(Math.random() * severities.length)]
    const randomLocation = locations[Math.floor(Math.random() * locations.length)]
    
    const defect = {
      type: randomDefectType,
      severity: randomSeverity,
      location: randomLocation,
      description: `AI analysis detected ${randomDefectType} in ${randomLocation}. This requires immediate attention for railway safety.`
    }
    
    const confidence = Math.floor(Math.random() * 20) + 80 // 80-99% confidence
    
    return {
      defect,
      filename,
      confidence,
      recommendedAction: getRecommendedAction(defect),
      safetyImplications: `This ${randomDefectType} poses ${randomSeverity} risk to train operations and passenger safety.`,
      aiAnalysis: `Simulated AI Analysis: Detected ${randomDefectType} with ${confidence}% confidence. Location: ${randomLocation}. Severity: ${randomSeverity}. Immediate action required.`,
      error: 'Using enhanced simulated analysis - API temporarily unavailable'
    }
  }

  const convertToBase64 = (file) => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader()
      reader.readAsDataURL(file)
      reader.onload = () => resolve(reader.result)
      reader.onerror = error => reject(error)
    })
  }

  const downscaleImageForPrompt = (dataUrl, maxSize = 256) => {
    return new Promise((resolve) => {
      const img = new Image()
      img.onload = () => {
        const scale = Math.min(maxSize / img.width, maxSize / img.height, 1)
        const canvas = document.createElement('canvas')
        canvas.width = Math.max(1, Math.floor(img.width * scale))
        canvas.height = Math.max(1, Math.floor(img.height * scale))
        const ctx = canvas.getContext('2d')
        ctx.drawImage(img, 0, 0, canvas.width, canvas.height)
        // Moderate quality to keep token usage low
        const small = canvas.toDataURL('image/jpeg', 0.6)
        resolve(small)
      }
      img.onerror = () => resolve(dataUrl)
      img.src = dataUrl
    })
  }

  const analyzeImageWithGemini = async (base64Image, filename) => {
    // Use provided Gemini API key directly or window.GEMINI_API_KEY override
    const INLINE_API_KEY = 'AIzaSyBOtiWfltFcpNpEnLZZNYHKeKVhpXKN4k4'
    const API_KEY = (typeof window !== 'undefined' && window.GEMINI_API_KEY) || INLINE_API_KEY

    if (!API_KEY || API_KEY === 'YOUR_GEMINI_API_KEY_HERE') {
      throw new Error('Missing Gemini API key. Set window.GEMINI_API_KEY or replace INLINE_API_KEY.')
    }

    // Gemini 1.5 Flash vision via REST (multimodal)
    const url = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${API_KEY}`

    // Extract base64 bytes from data URL
    const b64 = base64Image.split(',')[1] || base64Image

    const body = {
      contents: [
        {
          parts: [
            {
              text: `Analyze the attached railway track image and return ONLY strict JSON with keys: defectType [crack|obstacle|looseBolt|joint|ballast|signal|vegetation|drainage|none], severity [critical|high|medium|low|none], location (short), description (1-2 sentences), recommendedAction (1 sentence), confidence (0-100), safetyImplications (1 sentence). If uncertain, set defectType 'none' with low confidence. Filename: ${filename}`
            },
            {
              inline_data: {
                mime_type: 'image/jpeg',
                data: b64
              }
            }
          ]
        }
      ],
      generationConfig: {
        temperature: 0,
        maxOutputTokens: 600
      }
    }

    const response = await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(body)
    })

    if (!response.ok) {
      const errorText = await response.text()
      console.error('Gemini API Error:', errorText)
      throw new Error(`Gemini request failed: ${response.status} - ${errorText}`)
    }

    const data = await response.json()
    const text = data?.candidates?.[0]?.content?.parts?.[0]?.text || ''
    const cleaned = stripJsonFences(text)

    try {
      const analysisData = JSON.parse(cleaned)
      const noneDetected = (analysisData.defectType || '').toLowerCase() === 'none'
      const defect = noneDetected ? null : {
        type: analysisData.defectType || 'unknown',
        severity: analysisData.severity || 'medium',
        location: analysisData.location || 'Unknown location',
        description: analysisData.description || 'No description available'
      }
      return {
        defect,
        filename,
        confidence: typeof analysisData.confidence === 'number' ? analysisData.confidence : (noneDetected ? 30 : 85),
        recommendedAction: analysisData.recommendedAction || (noneDetected ? 'Continue routine inspection' : 'Contact maintenance team'),
        safetyImplications: analysisData.safetyImplications || (noneDetected ? 'Insufficient information to assess risk' : 'Safety assessment required'),
        aiAnalysis: cleaned
      }
    } catch (e) {
      const defect = {
        type: 'analysis',
        severity: 'medium',
        location: 'Track section',
        description: cleaned.substring(0, 200) + '...'
      }
      return {
        defect,
        filename,
        confidence: 75,
        recommendedAction: 'Review AI analysis and take appropriate action',
        safetyImplications: 'AI analysis completed - manual review recommended',
        aiAnalysis: cleaned
      }
    }
  }

  const stripJsonFences = (text) => {
    if (!text) return ''
    // Remove Markdown fences like ```json ... ```
    const fenced = text.match(/```[\s\S]*?```/)
    const candidate = fenced ? fenced[0].replace(/```json|```/g, '').trim() : text.trim()
    // If still contains extra prose, attempt to extract the first top-level JSON object
    const firstBrace = candidate.indexOf('{')
    const lastBrace = candidate.lastIndexOf('}')
    if (firstBrace !== -1 && lastBrace !== -1 && lastBrace > firstBrace) {
      return candidate.slice(firstBrace, lastBrace + 1)
    }
    return candidate
  }

  const generateMaintenanceAlert = (location) => {
    const maintenanceAlert = {
      id: Date.now(),
      type: 'Warning',
      message: `Maintenance required at ${location} - Defect detected by AI system`,
      time: new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}),
      status: 'Active',
      action: 'Maintenance team notified'
    }

    addAlert(maintenanceAlert)
    alert('Maintenance alert generated and sent to dispatch center!')
  }

  const getRecommendedAction = (defect) => {
    const actions = {
      'crack': 'Immediate track inspection and repair required',
      'obstacle': 'Emergency clearance operation needed',
      'looseBolt': 'Schedule maintenance within 24 hours'
    }
    return actions[defect.type] || 'Contact maintenance team'
  }

  const openAnalysisModal = (defectType, filename) => {
    setModalData({
      defectType,
      filename,
      analysisResults,
      aiAnalysis: analysisResults?.aiAnalysis
    })
    setShowModal(true)
  }
  
  // exportAsPDF function is already defined at the top of the file

  const closeModal = () => {
    setShowModal(false)
    setModalData(null)
  }

  return (
    <div className="detection-grid">
      <div className="card upload-card">
        <div className="card__header">
          <h3>Track Image Analysis</h3>
        </div>
        <div className="card__body">
          <div 
            className="upload-area"
            onDragOver={handleDragOver}
            onDragLeave={handleDragLeave}
            onDrop={handleDrop}
            onClick={() => document.getElementById('fileInput').click()}
            style={{ cursor: 'pointer' }}
          >
            <div className="upload-content">
              <div className="upload-icon">📷</div>
              <p>Drop track images here or click to browse</p>
              <input 
                type="file" 
                accept="image/*" 
                onChange={handleFileUpload}
                style={{ display: 'none' }}
                id="fileInput"
              />
              <span>Click to upload</span>
            </div>
          </div>
          <div className="sample-images">
            <h4>Sample Images:</h4>
            <div className="sample-grid">
              <button 
                className="sample-btn" 
                onClick={() => analyzeSampleImage('crack')}
                disabled={isAnalyzing}
              >
                Track Crack
              </button>
              <button 
                className="sample-btn" 
                onClick={() => analyzeSampleImage('obstacle')}
                disabled={isAnalyzing}
              >
                Obstacle
              </button>
              <button 
                className="sample-btn" 
                onClick={() => analyzeSampleImage('bolts')}
                disabled={isAnalyzing}
              >
                Loose Bolts
              </button>
            </div>
          </div>
        </div>
      </div>

      <div className="card analysis-card">
        <div className="card__header">
          <h3>AI Analysis Results</h3>
        </div>
        <div className="card__body">
          <div className="analysis-results">
            {isAnalyzing ? (
              <div className="loading">Analyzing image with AI...</div>
            ) : analysisResults ? (
              <div className="analysis-item animate-in">
                <div className="analysis-header">
                  {analysisResults.defect ? (
                    <span className="defect-type" style={{ color: 'var(--color-indigo-700)' }}>
                      {analysisResults.defect.type.toUpperCase()} DETECTED
                    </span>
                  ) : (
                    <span className="defect-type" style={{ color: 'var(--color-green-700)' }}>
                      NO DEFECTS DETECTED
                    </span>
                  )}
                  <span className="confidence-score" style={{ background: 'var(--color-indigo-600)' }}>
                    {analysisResults.confidence}% confidence
                  </span>
                </div>
                
                {/* Display the uploaded image */}
                {analysisResults.imageData && (
                  <div className="analysis-image" style={{ marginBottom: '15px', textAlign: 'center' }}>
                    <img 
                      src={analysisResults.imageData} 
                      alt="Analyzed Track Image" 
                      style={{ 
                        maxWidth: '100%', 
                        maxHeight: '250px', 
                        border: '1px solid #ccc',
                        borderRadius: '4px'
                      }} 
                    />
                  </div>
                )}
                
                {analysisResults.defect ? (
                  <>
                    <p><strong>Location:</strong> {analysisResults.defect.location}</p>
                    <p><strong>Description:</strong> {analysisResults.defect.description}</p>
                    <p>
                      <strong>Severity:</strong>{' '}
                      <span className={`status--${analysisResults.defect.severity === 'critical' ? 'error' : 
                        analysisResults.defect.severity === 'high' ? 'warning' : 'info'}`}>
                        {analysisResults.defect.severity.toUpperCase()}
                      </span>
                    </p>
                  </>
                ) : (
                  <>
                    <p><strong>Description:</strong> No specific defect indicated by filename/context.</p>
                  </>
                )}
                <p><strong>Recommended Action:</strong> {analysisResults.recommendedAction || (analysisResults.defect ? getRecommendedAction(analysisResults.defect) : 'Continue routine inspection')}</p>
                {analysisResults.safetyImplications && (
                  <p><strong>Safety Implications:</strong> {analysisResults.safetyImplications}</p>
                )}
                {analysisResults.error && (
                  <p className="error-message">⚠️ {analysisResults.error}</p>
                )}
                <div className="analysis-actions">
                  {analysisResults.defect && (
                    <button 
                      className="btn btn--secondary"
                      onClick={() => generateMaintenanceAlert(analysisResults.defect.location)}
                    >
                      Send to Maintenance
                    </button>
                  )}
                </div>
                <div className="export-report-container">
                  <button 
                    className="btn btn--primary export-btn"
                    onClick={() => exportAsPDF()}
                  >
                    Export Report
                  </button>
                </div>
              </div>
            ) : (
              <div className="no-analysis">
                <p>Upload an image or select a sample to see AI detection results</p>
              </div>
            )}
          </div>
        </div>
      </div>
      
      {/* PDF Loading Indicator */}
      {isPdfLoading && (
        <div className="pdf-loading">
          <div className="loading-spinner"></div>
        </div>
      )}
      
      {/* Detailed Report Modal */}
      {showModal && modalData && (
        <div className="modal-overlay" onClick={closeModal}>
          <div className="modal" onClick={(e) => e.stopPropagation()}>
            <div className="modal__header">
              <h3>Detailed Analysis Report</h3>
              <button className="modal__close" onClick={closeModal}>×</button>
            </div>
            <div className="modal__body">
              <div className="modal-analysis" ref={reportRef}>
                <h4>Analysis Summary</h4>
                <p><strong>Image:</strong> {modalData.filename}</p>
                <p><strong>Defect Type:</strong> {modalData.analysisResults?.defect?.type}</p>
                <p><strong>Severity:</strong> {modalData.analysisResults?.defect?.severity}</p>
                <p><strong>Location:</strong> {modalData.analysisResults?.defect?.location}</p>
                <p><strong>Confidence:</strong> {modalData.analysisResults?.confidence}%</p>

                <h5>AI Analysis</h5>
                {modalData.aiAnalysis ? (
                  <div className="ai-analysis-content">
                    <pre style={{ 
                      whiteSpace: 'pre-wrap', 
                      fontFamily: 'var(--font-family-base)', 
                      background: 'var(--color-gray-50)', 
                      padding: 'var(--space-16)', 
                      borderRadius: 'var(--radius-base)',
                      fontSize: 'var(--font-size-sm)',
                      lineHeight: 'var(--line-height-relaxed)'
                    }}>
                      {modalData.aiAnalysis}
                    </pre>
                  </div>
                ) : (
                  <p>
                    No structured AI analysis text was returned.
                  </p>
                )}
                
                <h5>Maintenance Recommendations:</h5>
                <p>
                  {modalData.analysisResults?.recommendedAction || 'Review site and schedule appropriate maintenance.'}
                </p>
                
                <div className="modal-actions">
                  <button className="btn btn--primary">Generate Work Order</button>
                  <button className="btn btn--secondary" onClick={exportAsPDF}>Export as PDF</button>
                  <button className="btn btn--secondary" onClick={closeModal}>Close</button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}

export default TrackDetection

